{"version":3,"sources":["components/themes/base.ts","components/themes/lightTheme.ts","components/themes/darkTheme.ts","components/themes/ThemeProvider.tsx","components/common/Sidebar.tsx","components/common/Header.tsx","components/common/Footer.tsx","components/common/Chatbot.tsx","components/views/Home.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["themeMap","lightTheme","createMuiTheme","palette","type","background","default","primary","main","secondary","darkTheme","ThemeContext","React","createContext","themeName","ThemeProvider","props","curThemeName","localStorage","getItem","useState","_setThemeName","theme","themeCreator","Provider","value","setItem","responsiveFontSizes","CssBaseline","children","useStyles","makeStyles","list","width","margin","fullList","listElement","marginLeft","Sidebar","classes","setThemeName","useContext","isNight","setNight","SwipeableDrawer","anchor","open","left","onClose","toggleDrawer","onOpen","className","clsx","role","onClick","onKeyDown","Button","variant","color","createStyles","root","flexGrow","minWidth","display","marginRight","appbar","position","zIndex","menuButton","spacing","title","breakpoints","up","search","borderRadius","shape","backgroundColor","fade","common","white","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","Header","sidebarState","setSidebarState","AppBar","Toolbar","IconButton","edge","aria-label","Typography","noWrap","InputBase","placeholder","input","inputProps","stickToBottom","bottom","button","Footer","Grid","container","item","right","Chatbot","Dialog","isAuthenticated","DialogTitle","id","List","ListItem","signIn","ListItemAvatar","Avatar","style","src","alt","ListItemText","Home","Component","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gdAQA,IAAMA,EAAqC,CACzCC,WCPwBC,YAAe,CACvCC,QAAS,CACPC,KAAM,QACNC,WAAY,CACVC,QAAS,QAEXC,QAAS,CACPC,KAAM,QAERC,UAAW,CACTD,KAAM,cDFVE,UERuBR,YAAe,CACtCC,QAAS,CACPC,KAAM,OACNC,WAAY,CACVC,QAAS,QAEXC,QAAS,CACPC,KAAM,QAERC,UAAW,CACTD,KAAM,eCPCG,EAAeC,IAAMC,eAAc,SAACC,OAyBlCC,EAvBiB,SAACC,GAE5B,IAAMC,EAAeC,aAAaC,QAAQ,aAAe,aAFnB,EAKHC,mBAASH,GALN,mBAK/BH,EAL+B,KAKpBO,EALoB,KAQhCC,EHXJ,SAAsBA,GAC3B,OAAOtB,EAASsB,GGUCC,CAAaT,GAQ5B,OACI,kBAACH,EAAaa,SAAd,CAAuBC,MAPL,SAACX,GAClBI,aAAaQ,QAAQ,WAAYZ,GACjCO,EAAcP,KAMb,kBAAC,IAAD,CAAkBQ,MAAOK,YAAoBL,IAAQ,kBAACM,EAAA,EAAD,MAAgBZ,EAAMa,YChB/EC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,IACPC,OAAQ,QAEVC,SAAU,CACRF,MAAO,QAETG,YAAa,CACXC,WAAY,MAUD,SAASC,EAAQtB,GAC9B,IAAMuB,EAAUT,IACVU,EAAeC,qBAAW9B,GAFmB,EAGvBS,mBAA8C,eAArCF,aAAaC,QAAQ,aAHP,mBAG5CuB,EAH4C,KAGnCC,EAHmC,KA8BnD,OACE,6BACE,kBAACC,EAAA,EAAD,CACEC,OAAQ,OACRC,KAAM9B,EAAM+B,KACZC,QAAS,WAAQhC,EAAMiC,cAAa,IACpCC,OAAQ,WAAQlC,EAAMiC,cAAa,KA9BvC,yBACEE,UAAWC,YAAKb,EAAQP,KAAT,eACZO,EAAQJ,UAAW,IAEtBkB,KAAK,eACLC,QAAS,WAAQtC,EAAMiC,cAAa,IACpCM,UAAW,WAAQvC,EAAMiC,cAAa,KAEpC,yBAAKE,UAAWZ,EAAQH,aACtB,kBAACoB,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNJ,QAAS,WACPd,EAAaE,EAAU,aAAe,aACtCC,GAAUD,KAIXA,EAAU,QAAU,OATvB,cChCV,IAAMZ,EAAYC,aAAW,SAACT,GAAD,OAC3BqC,YAAa,CACXC,KAAM,CACJC,SAAU,EACV5B,MAAO,OACP6B,SAAU,QACVC,QAAS,QACT1B,WAAY,OACZ2B,YAAa,QAEfC,OAAQ,CACNC,SAAU,WACVC,OAAQ,GAEVC,WAAY,CACVJ,YAAa1C,EAAM+C,QAAQ,IAE7BC,MAAM,aACJT,SAAU,EACVE,QAAS,QACRzC,EAAMiD,YAAYC,GAAG,MAAQ,CAC5BT,QAAS,UAGbU,OAAO,aACLP,SAAU,WACVQ,aAAcpD,EAAMqD,MAAMD,aAC1BE,gBAAiBC,YAAKvD,EAAMnB,QAAQ2E,OAAOC,MAAO,KAClD,UAAW,CACTH,gBAAiBC,YAAKvD,EAAMnB,QAAQ2E,OAAOC,MAAO,MAEpD1C,WAAY,EACZJ,MAAO,QACNX,EAAMiD,YAAYC,GAAG,MAAQ,CAC5BnC,WAAYf,EAAM+C,QAAQ,GAC1BpC,MAAO,SAGX+C,WAAY,CACVC,QAAS3D,EAAM+C,QAAQ,EAAG,GAC1Ba,OAAQ,OACRhB,SAAU,WACViB,cAAe,OACfpB,QAAS,OACTqB,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACT5B,MAAO,WAET6B,WAAW,aACTN,QAAS3D,EAAM+C,QAAQ,EAAG,EAAG,EAAG,GAEhCmB,YAAY,cAAD,OAAgBlE,EAAM+C,QAAQ,GAA9B,OACXoB,WAAYnE,EAAMoE,YAAYC,OAAO,SACrC1D,MAAO,QACNX,EAAMiD,YAAYC,GAAG,MAAQ,CAC5BvC,MAAO,OACP,UAAW,CACTA,MAAO,eAsDF2D,MA/Cf,WACE,IAAMrD,EAAUT,IADA,EAEwBV,oBAAS,GAFjC,mBAETyE,EAFS,KAEKC,EAFL,KAIV7C,EAAe,SAACH,GACpBgD,EAAgBhD,IAGlB,OACE,yBAAKK,UAAWZ,EAAQqB,MACtB,kBAACmC,EAAA,EAAD,CAAQ5C,UAAWZ,EAAQ0B,QACzB,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACL/C,UAAWZ,EAAQ6B,WACnBV,MAAM,UACNyC,aAAW,cACX7C,QAAS,WACPL,GAAc4C,KAGhB,kBAAC,IAAD,OAEF,kBAACO,EAAA,EAAD,CAAYjD,UAAWZ,EAAQ+B,MAAOb,QAAQ,KAAK4C,QAAM,GAAzD,wBAGA,yBAAKlD,UAAWZ,EAAQkC,QACtB,yBAAKtB,UAAWZ,EAAQyC,YACtB,kBAAC,IAAD,OAEF,kBAACsB,EAAA,EAAD,CACEC,YAAY,eACZhE,QAAS,CACPqB,KAAMrB,EAAQ+C,UACdkB,MAAOjE,EAAQgD,YAEjBkB,WAAY,CAAE,aAAc,eAKpC,kBAACnE,EAAD,CAASW,aAAcA,EAAcF,KAAM8C,M,SChH3C/D,EAAYC,aAAW,SAACT,GAAD,OACzBqC,YAAa,CACT+C,cAAe,CACX7C,SAAU,EACV5B,MAAO,OACPiC,SAAU,QACVyC,OAAQ,MACRzB,OAAQ,OAEZ0B,OAAQ,CACJ1B,OAAQ,YAmBL2B,EAdA,WACX,IAAMtE,EAAUT,IAEhB,OACI,yBAAKqB,UAAWZ,EAAQmE,eACpB,kBAACI,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,O,+DChBpBlF,EAAYC,aAAW,SAACT,GAAD,OACzBqC,YAAa,CACTC,KAAM,CACFM,SAAU,WACVC,OAAQ,GAEZyC,OAAQ,CACJ1C,SAAU,QACVgB,OAAQ,MACRD,QAAS,WACT0B,OAAQ,MACRM,MAAO,QAiCJC,EA5BA,SAAClG,GACZ,IAAMuB,EAAUT,IAChB,OACI,yBAAKqB,UAAWZ,EAAQqB,MACpB,kBAACJ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUP,UAAWZ,EAAQqE,QAA/D,gBACA,kBAACO,EAAA,EAAD,CAAQrE,MAAO9B,EAAMoG,iBACjB,kBAACC,EAAA,EAAD,CAAaC,GAAG,uBAAhB,WACA,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUZ,QAAM,EAACtD,QAAS,kBAAMtC,EAAMyG,WAClC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,MAAO,CAAEhD,gBAAiB,SAC9B,yBACIiD,IAAI,8EACJ3C,OAAO,KACP4C,IAAI,QAIhB,kBAACC,EAAA,EAAD,CAAcxH,QAAQ,8B,gCC1C7ByH,G,6KAMb,OACI,yBAAKV,GAAG,kBACJ,yBAAKO,IAA4B,YAAa1E,UAAU,WAAW2E,IAAI,c,GARrDG,c,iBCe5BnG,GAAYC,aAAW,SAACT,GAAD,OAC3BqC,YAAa,CACXC,KAAM,CACJC,SAAU,EACV5B,MAAO,aA2BEiG,OArBf,WACE,IAAM3F,EAAUT,KAEhB,OACE,yBAAKqB,UAAWZ,EAAQqB,MACtB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,6BACA,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOuE,KAAK,KACZ,kBAAC,EAAD,UAKR,kBAAC,EAAD,CAASf,iBAAiB,EAAMK,OAAQ,WAAO,OAAO,KACtD,kBAAC,EAAD,QCjCcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,GAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e03bbcf4.chunk.js","sourcesContent":["import { Theme } from \"@material-ui/core\";\r\nimport { lightTheme } from \"./lightTheme\";\r\nimport { darkTheme } from \"./darkTheme\";\r\n\r\nexport function themeCreator(theme: string): Theme {\r\n  return themeMap[theme];\r\n}\r\n\r\nconst themeMap: { [key: string]: Theme } = {\r\n  lightTheme,\r\n  darkTheme\r\n};","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'light',\r\n    background: {\r\n      default: \"#fff\"\r\n    },\r\n    primary: {\r\n      main: '#000'\r\n    },\r\n    secondary: {\r\n      main: '#0000FF'\r\n    }\r\n  }\r\n});","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    background: {\r\n      default: \"#000\"\r\n    },\r\n    primary: {\r\n      main: \"#fff\"\r\n    },\r\n    secondary: {\r\n      main: '#9932CC'\r\n    }\r\n  }\r\n});","import React, { useState } from 'react';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { MuiThemeProvider, responsiveFontSizes } from \"@material-ui/core\";\r\nimport { themeCreator } from './base';\r\n\r\nexport const ThemeContext = React.createContext((themeName: string): void => {});\r\n\r\nconst ThemeProvider: React.FC = (props) => {\r\n     // Read current theme from localStorage or maybe from an api\r\n     const curThemeName = localStorage.getItem(\"appTheme\") || \"lightTheme\";\r\n\r\n     // State to hold the selected theme name\r\n     const [themeName, _setThemeName] = useState(curThemeName);\r\n \r\n     // Get the theme object by theme name\r\n     const theme = themeCreator(themeName);\r\n \r\n     const setThemeName = (themeName: string): void => {\r\n         localStorage.setItem(\"appTheme\", themeName);\r\n         _setThemeName(themeName);\r\n     }\r\n \r\n\r\n    return (\r\n        <ThemeContext.Provider value={setThemeName}>\r\n          <MuiThemeProvider theme={responsiveFontSizes(theme)}><CssBaseline />{props.children}</MuiThemeProvider>\r\n        </ThemeContext.Provider>\r\n      );\r\n}\r\n\r\nexport default ThemeProvider;","import React, { useContext, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport clsx from 'clsx';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ThemeContext } from '../themes/ThemeProvider';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n    margin: 'auto',\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  listElement: {\r\n    marginLeft: 50\r\n  },\r\n});\r\n\r\ninterface SidebarProps {\r\n  left: boolean;\r\n  toggleDrawer(open: boolean): void;\r\n}\r\n\r\n\r\nexport default function Sidebar(props: SidebarProps) {\r\n  const classes = useStyles();\r\n  const setThemeName = useContext(ThemeContext);\r\n  const [isNight, setNight] = useState(localStorage.getItem(\"appTheme\") === \"lightTheme\" ? false : true);\r\n\r\n  const sideList = () => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: false,\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={() => { props.toggleDrawer(false) }}\r\n      onKeyDown={() => { props.toggleDrawer(false) }}\r\n    >\r\n        <div className={classes.listElement}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              setThemeName(isNight ? \"lightTheme\" : \"darkTheme\");\r\n              setNight(!isNight);\r\n            }\r\n            }\r\n          >\r\n            {isNight ? \"Light\" : \"Dark\"} Theme\r\n          </Button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <SwipeableDrawer\r\n        anchor={'left'}\r\n        open={props.left}\r\n        onClose={() => { props.toggleDrawer(false) }}\r\n        onOpen={() => { props.toggleDrawer(true) }}\r\n      >\r\n        {sideList()}\r\n      </SwipeableDrawer>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { createStyles, fade, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Sidebar from './Sidebar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      width: '100%',\r\n      minWidth: '600px',\r\n      display: 'block',\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    },\r\n    appbar: {\r\n      position: 'relative',\r\n      zIndex: 0,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25),\r\n      },\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: '12ch',\r\n        '&:focus': {\r\n          width: '20ch',\r\n        },\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nfunction Header() {\r\n  const classes = useStyles();\r\n  const [sidebarState, setSidebarState] = useState(true);\r\n\r\n  const toggleDrawer = (open: boolean) => {\r\n    setSidebarState(open);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar className={classes.appbar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={() => { \r\n              toggleDrawer(!sidebarState); \r\n            }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Alin-Daniel Ferenczi\r\n          </Typography>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Sidebar toggleDrawer={toggleDrawer} left={sidebarState}/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Header;","import React, { useContext, useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { ThemeContext } from '../themes/ThemeProvider';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Chatbot from './Chatbot';\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        stickToBottom: {\r\n            flexGrow: 1,\r\n            width: '100%',\r\n            position: 'fixed',\r\n            bottom: '2em',\r\n            height: '3em'\r\n        },\r\n        button: {\r\n            height: '3em'\r\n        }\r\n    }),\r\n);\r\n\r\nconst Footer = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.stickToBottom}>\r\n            <Grid container>\r\n                <Grid item>\r\n                    \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            position: 'absolute',\r\n            zIndex: 1,\r\n        },\r\n        button: {\r\n            position: 'fixed',\r\n            height: '3em',\r\n            padding: '6px 16px',\r\n            bottom: '2em',\r\n            right: 0,\r\n        }\r\n    }),\r\n);\r\n\r\nconst Chatbot= (props: ChatbotProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button variant=\"contained\" color=\"primary\" className={classes.button}>Open Chatbot</Button>\r\n            <Dialog open={!props.isAuthenticated}>\r\n                <DialogTitle id=\"simple-dialog-title\">Sign in</DialogTitle>\r\n                <div>\r\n                    <List>\r\n                        <ListItem button onClick={() => props.signIn()}>\r\n                            <ListItemAvatar>\r\n                                <Avatar style={{ backgroundColor: \"#eee\" }}>\r\n                                    <img\r\n                                        src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\"\r\n                                        height=\"30\"\r\n                                        alt=\"G\"\r\n                                    />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText primary=\"Sign in with Google\" />\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chatbot\r\n\r\ntype ChatbotProps = {\r\n    isAuthenticated: boolean,\r\n    signIn: () => void\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport '../../styles/logo.css';\r\n\r\nexport default class Home extends Component {\r\n    static propTypes = {\r\n        prop: PropTypes\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"logo-container\">\r\n                <img src={process.env.PUBLIC_URL+\"/logo.png\"} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport Header from './common/Header';\nimport Footer from './common/Footer';\nimport Chatbot from './common/Chatbot';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Home from './views/Home';\nimport Sidebar from './common/Sidebar';\nimport {\n\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nexport interface IUserData {\n  messages: [],\n  user: {},\n  isAuthenticated: boolean,\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      width: '100%'\n    }\n  }),\n);\n\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Header />\n      <Router>\n          <div>\n          <Switch>\n              <Route path=\"/\">\n              <Home />\n              </Route>\n          </Switch>\n          </div>\n      </Router>\n      <Chatbot isAuthenticated={true} signIn={() => {return true;}}/>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport ThemeProvider from './components/themes/ThemeProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}