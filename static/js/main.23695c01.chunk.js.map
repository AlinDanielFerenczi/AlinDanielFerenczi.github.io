{"version":3,"sources":["logo.png","components/themes/base.ts","components/themes/lightTheme.ts","components/themes/darkTheme.ts","components/themes/ThemeProvider.tsx","components/common/Header.tsx","components/common/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","themeMap","lightTheme","createMuiTheme","palette","type","primary","main","secondary","darkTheme","background","default","ThemeContext","React","createContext","themeName","ThemeProvider","props","curThemeName","localStorage","getItem","useState","_setThemeName","theme","themeCreator","Provider","value","setItem","responsiveFontSizes","CssBaseline","children","Header","setThemeName","useContext","isNight","setNight","Button","variant","color","onClick","Footer","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,kC,0OCQ3C,IAAMC,EAAqC,CACzCC,WCPwBC,YAAe,CACvCC,QAAS,CACPC,KAAM,QACNC,QAAS,CACPC,KAAM,QAERC,UAAW,CACTD,KAAM,cDCVE,UERuBN,YAAe,CACtCC,QAAS,CACPC,KAAM,OACNK,WAAY,CACVC,QAAS,QAEXL,QAAS,CACPC,KAAM,QAERC,UAAW,CACTD,KAAM,eCPCK,EAAeC,IAAMC,eAAc,SAACC,OAyBlCC,EAvBiB,SAACC,GAE5B,IAAMC,EAAeC,aAAaC,QAAQ,aAAe,aAFnB,EAKHC,mBAASH,GALN,mBAK/BH,EAL+B,KAKpBO,EALoB,KAQhCC,EHXJ,SAAsBA,GAC3B,OAAOtB,EAASsB,GGUCC,CAAaT,GAQ5B,OACI,kBAACH,EAAaa,SAAd,CAAuBC,MAPL,SAACX,GAClBI,aAAaQ,QAAQ,WAAYZ,GACjCO,EAAcP,KAMb,kBAAC,IAAD,CAAkBQ,MAAOK,YAAoBL,IAAQ,kBAACM,EAAA,EAAD,MAAgBZ,EAAMa,YCDtEC,MApBf,WACI,IAAMC,EAAeC,qBAAWrB,GADlB,EAEcS,oBAAS,GAFvB,mBAEPa,EAFO,KAEEC,EAFF,KAGd,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAM,UACNC,QAAS,WACDP,EAAaE,EAAU,aAAc,aACrCC,GAAUD,KALtB,OASSA,EAAU,QAAU,OAT7B,YCeGM,EApBA,WACX,IAAMR,EAAeC,qBAAWrB,GADf,EAEWS,oBAAS,GAFpB,mBAEVa,EAFU,KAEDC,EAFC,KAGjB,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,MAAM,UACNC,QAAS,WACDP,EAAaE,EAAU,aAAc,aACrCC,GAAUD,KALtB,OASSA,EAAU,QAAU,OAT7B,YCOGO,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23695c01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e14e1d9c.png\";","import { Theme } from \"@material-ui/core\";\r\nimport { lightTheme } from \"./lightTheme\";\r\nimport { darkTheme } from \"./darkTheme\";\r\n\r\nexport function themeCreator(theme: string): Theme {\r\n  return themeMap[theme];\r\n}\r\n\r\nconst themeMap: { [key: string]: Theme } = {\r\n  lightTheme,\r\n  darkTheme\r\n};","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'light',\r\n    primary: {\r\n      main: '#000'\r\n    },\r\n    secondary: {\r\n      main: '#0000FF'\r\n    }\r\n  }\r\n});","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    background: {\r\n      default: \"#000\"\r\n    },\r\n    primary: {\r\n      main: \"#fff\"\r\n    },\r\n    secondary: {\r\n      main: '#9932CC'\r\n    }\r\n  }\r\n});","import React, { useState } from 'react';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { MuiThemeProvider, responsiveFontSizes } from \"@material-ui/core\";\r\nimport { themeCreator } from './base';\r\n\r\nexport const ThemeContext = React.createContext((themeName: string): void => {});\r\n\r\nconst ThemeProvider: React.FC = (props) => {\r\n     // Read current theme from localStorage or maybe from an api\r\n     const curThemeName = localStorage.getItem(\"appTheme\") || \"lightTheme\";\r\n\r\n     // State to hold the selected theme name\r\n     const [themeName, _setThemeName] = useState(curThemeName);\r\n \r\n     // Get the theme object by theme name\r\n     const theme = themeCreator(themeName);\r\n \r\n     const setThemeName = (themeName: string): void => {\r\n         localStorage.setItem(\"appTheme\", themeName);\r\n         _setThemeName(themeName);\r\n     }\r\n \r\n\r\n    return (\r\n        <ThemeContext.Provider value={setThemeName}>\r\n          <MuiThemeProvider theme={responsiveFontSizes(theme)}><CssBaseline />{props.children}</MuiThemeProvider>\r\n        </ThemeContext.Provider>\r\n      );\r\n}\r\n\r\nexport default ThemeProvider;","import React, { useContext, useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { ThemeContext } from '../themes/ThemeProvider';\r\n\r\nfunction Header() {\r\n    const setThemeName = useContext(ThemeContext);\r\n    const [isNight, setNight] = useState(false);\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                        setThemeName(isNight ? \"lightTheme\": \"darkTheme\");\r\n                        setNight(!isNight);\r\n                    }\r\n                }\r\n            >\r\n                Set {isNight ? \"Light\" : \"Dark\"} Theme\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { useContext, useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { ThemeContext } from '../themes/ThemeProvider';\r\n\r\nconst Footer = () => {\r\n    const setThemeName = useContext(ThemeContext);\r\n    const [isNight, setNight] = useState(false);\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                        setThemeName(isNight ? \"lightTheme\": \"darkTheme\");\r\n                        setNight(!isNight);\r\n                    }\r\n                }\r\n            >\r\n                Set {isNight ? \"Light\" : \"Dark\"} Theme\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport Header from './components/common/Header';\nimport Footer from './components/common/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ThemeProvider from './components/themes/ThemeProvider';\n\nReactDOM.render(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}