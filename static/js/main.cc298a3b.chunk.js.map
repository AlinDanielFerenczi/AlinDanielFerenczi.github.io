{"version":3,"sources":["logo.png","components/common/Header.tsx","components/themes/base.ts","components/themes/lightTheme.ts","components/themes/darkTheme.ts","components/themes/ThemeProvider.tsx","components/common/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","Header","classes","className","AppBar","Toolbar","IconButton","edge","aria-label","Typography","variant","noWrap","InputBase","placeholder","input","inputProps","themeMap","lightTheme","createMuiTheme","type","background","default","primary","main","secondary","darkTheme","ThemeContext","React","createContext","themeName","ThemeProvider","props","curThemeName","localStorage","getItem","useState","_setThemeName","themeCreator","Provider","value","setItem","responsiveFontSizes","CssBaseline","children","stickToBottom","bottom","Footer","setThemeName","useContext","isNight","setNight","Button","onClick","App","id","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc298a3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e14e1d9c.png\";","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { createStyles, fade, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25),\r\n      },\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: '12ch',\r\n        '&:focus': {\r\n          width: '20ch',\r\n        },\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nfunction Header() {\r\n    const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Alin-Daniel Ferenczi\r\n          </Typography>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Searchâ€¦\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Header;","import { Theme } from \"@material-ui/core\";\r\nimport { lightTheme } from \"./lightTheme\";\r\nimport { darkTheme } from \"./darkTheme\";\r\n\r\nexport function themeCreator(theme: string): Theme {\r\n  return themeMap[theme];\r\n}\r\n\r\nconst themeMap: { [key: string]: Theme } = {\r\n  lightTheme,\r\n  darkTheme\r\n};","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const lightTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'light',\r\n    background: {\r\n      default: \"#fff\"\r\n    },\r\n    primary: {\r\n      main: '#000'\r\n    },\r\n    secondary: {\r\n      main: '#0000FF'\r\n    }\r\n  }\r\n});","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    background: {\r\n      default: \"#000\"\r\n    },\r\n    primary: {\r\n      main: \"#fff\"\r\n    },\r\n    secondary: {\r\n      main: '#9932CC'\r\n    }\r\n  }\r\n});","import React, { useState } from 'react';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { MuiThemeProvider, responsiveFontSizes } from \"@material-ui/core\";\r\nimport { themeCreator } from './base';\r\n\r\nexport const ThemeContext = React.createContext((themeName: string): void => {});\r\n\r\nconst ThemeProvider: React.FC = (props) => {\r\n     // Read current theme from localStorage or maybe from an api\r\n     const curThemeName = localStorage.getItem(\"appTheme\") || \"lightTheme\";\r\n\r\n     // State to hold the selected theme name\r\n     const [themeName, _setThemeName] = useState(curThemeName);\r\n \r\n     // Get the theme object by theme name\r\n     const theme = themeCreator(themeName);\r\n \r\n     const setThemeName = (themeName: string): void => {\r\n         localStorage.setItem(\"appTheme\", themeName);\r\n         _setThemeName(themeName);\r\n     }\r\n \r\n\r\n    return (\r\n        <ThemeContext.Provider value={setThemeName}>\r\n          <MuiThemeProvider theme={responsiveFontSizes(theme)}><CssBaseline />{props.children}</MuiThemeProvider>\r\n        </ThemeContext.Provider>\r\n      );\r\n}\r\n\r\nexport default ThemeProvider;","import React, { useContext, useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { ThemeContext } from '../themes/ThemeProvider';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        stickToBottom: {\r\n            width: '100%',\r\n            position: 'fixed',\r\n            bottom: 0\r\n        }\r\n    }),\r\n);\r\n\r\nconst Footer = () => {\r\n    const classes = useStyles();\r\n    const setThemeName = useContext(ThemeContext);\r\n    const [isNight, setNight] = useState(localStorage.getItem(\"appTheme\") === \"lightTheme\" ? false : true);\r\n    const [value, setValue] = React.useState('recents');\r\n    \r\n    return (\r\n        <div className={classes.stickToBottom}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                        setThemeName(isNight ? \"lightTheme\" : \"darkTheme\");\r\n                        setNight(!isNight);\r\n                    }\r\n                    }\r\n                >\r\n                    Set {isNight ? \"Light\" : \"Dark\"} Theme\r\n                </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport Header from './components/common/Header';\nimport Footer from './components/common/Footer';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      width: '100%'\n    }\n  }),\n);\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Header />\n      <div id=\"logo-container\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ThemeProvider from './components/themes/ThemeProvider';\n\nReactDOM.render(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}